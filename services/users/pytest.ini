[tool:pytest]
# Configuração do pytest para o Users Service

# Diretórios de teste
testpaths = tests

# Padrões de arquivos de teste
python_files = test_*.py *_test.py

# Padrões de classes de teste
python_classes = Test*

# Padrões de funções de teste
python_functions = test_*

# Marcadores customizados
markers =
    unit: Testes unitários rápidos
    integration: Testes de integração com dependências externas
    slow: Testes que demoram mais para executar
    auth: Testes relacionados à autenticação
    calorie: Testes do algoritmo calórico
    firebase: Testes que interagem com Firebase
    api: Testes de endpoints da API

# Opções padrão
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-fail-under=80
    --durations=10

# Configuração de cobertura
[coverage:run]
source = src
omit = 
    */tests/*
    */conftest.py
    */__init__.py
    */config/settings.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Configuração de logging para testes
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Filtros de warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning

# Configuração para testes assíncronos
asyncio_mode = auto

# Timeout para testes
timeout = 300

# Configuração para testes paralelos
# Para executar com: pytest -n auto
# Requer: pip install pytest-xdist
# addopts = -n auto

# Configuração para testes com dados reais
# Para executar: pytest -m "not integration" (pular testes de integração)
# Para executar: pytest -m integration (apenas testes de integração)

