name: üöÄ EvolveYou CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: southamerica-east1-docker.pkg.dev
  PROJECT_ID: evolveyou-prod
  REPOSITORY: evolveyou-microservices

jobs:
  # ===== LINTING & CODE QUALITY =====
  lint:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          npm install
          pip install flake8 black isort

      - name: Lint JavaScript/TypeScript
        run: npm run lint

      - name: Lint Python
        run: |
          flake8 services/ --max-line-length=88 --extend-ignore=E203,W503
          black --check services/
          isort --check-only services/

      - name: Check Flutter formatting
        if: hashFiles('apps/mobile/pubspec.yaml') != ''
        run: |
          cd apps/mobile
          flutter format --dry-run --set-exit-if-changed .

  # ===== UNIT TESTS =====
  test-backend:
    name: üß™ Backend Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        service: [users, content, health-check, backend, plans-service, tracking-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd services/${{ matrix.service }}
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
            pip install pytest pytest-asyncio pytest-cov
          fi

      - name: Run tests
        run: |
          cd services/${{ matrix.service }}
          if [ -f pytest.ini ] || [ -d tests ]; then
            pytest --cov=src --cov-report=xml --cov-report=term
          else
            echo "No tests found for ${{ matrix.service }}"
          fi

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./services/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}

  test-frontend:
    name: üß™ Frontend Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        app: [web, admin]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/${{ matrix.app }}
          if [ -f package.json ]; then
            npm install
          fi

      - name: Run tests
        run: |
          cd apps/${{ matrix.app }}
          if [ -f package.json ] && grep -q '"test"' package.json; then
            npm test -- --coverage --watchAll=false
          else
            echo "No tests found for ${{ matrix.app }}"
          fi

  test-mobile:
    name: üß™ Mobile Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'

      - name: Install dependencies
        run: |
          cd apps/mobile
          if [ -f pubspec.yaml ]; then
            flutter pub get
          fi

      - name: Run tests
        run: |
          cd apps/mobile
          if [ -d test ]; then
            flutter test --coverage
          else
            echo "No tests found for mobile app"
          fi

  # ===== SECURITY SCAN =====
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Python security check
        run: |
          pip install safety bandit
          find services/ -name requirements.txt -exec safety check -r {} \;
          bandit -r services/ -f json -o bandit-report.json || true

  # ===== BUILD IMAGES =====
  build:
    name: üèóÔ∏è Build Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-mobile, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    strategy:
      matrix:
        service: [users, content, health-check, backend, plans-service, tracking-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.REGISTRY }}

      - name: Build and push Docker image
        run: |
          cd services/${{ matrix.service }}
          if [ -f Dockerfile ]; then
            IMAGE_TAG=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service }}:${{ github.sha }}
            docker build -t $IMAGE_TAG .
            docker push $IMAGE_TAG
            
            # Also tag as latest for develop branch
            if [ "${{ github.ref }}" = "refs/heads/develop" ]; then
              LATEST_TAG=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service }}:latest
              docker tag $IMAGE_TAG $LATEST_TAG
              docker push $LATEST_TAG
            fi
          fi

  # ===== DEPLOY STAGING =====
  deploy-staging:
    name: üöÄ Deploy Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    strategy:
      matrix:
        service: [users, content, health-check, backend, plans-service, tracking-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy to Cloud Run (Staging)
        run: |
          SERVICE_NAME="${{ matrix.service }}-staging"
          IMAGE_TAG=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service }}:${{ github.sha }}
          
          gcloud run deploy $SERVICE_NAME \
            --image $IMAGE_TAG \
            --region southamerica-east1 \
            --platform managed \
            --allow-unauthenticated \
            --memory 1Gi \
            --cpu 1 \
            --timeout 300 \
            --set-env-vars ENVIRONMENT=staging \
            --set-env-vars DEBUG=false \
            --set-env-vars FIREBASE_PROJECT_ID=${{ env.PROJECT_ID }}

  # ===== DEPLOY PRODUCTION =====
  deploy-production:
    name: üöÄ Deploy Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    strategy:
      matrix:
        service: [users, content, health-check, backend, plans-service, tracking-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy to Cloud Run (Production)
        run: |
          SERVICE_NAME="${{ matrix.service }}-service"
          IMAGE_TAG=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service }}:${{ github.sha }}
          
          gcloud run deploy $SERVICE_NAME \
            --image $IMAGE_TAG \
            --region southamerica-east1 \
            --platform managed \
            --allow-unauthenticated \
            --memory 1Gi \
            --cpu 1 \
            --timeout 300 \
            --set-env-vars ENVIRONMENT=production \
            --set-env-vars DEBUG=false \
            --set-env-vars FIREBASE_PROJECT_ID=${{ env.PROJECT_ID }}

  # ===== INTEGRATION TESTS =====
  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install test dependencies
        run: |
          npm install -g newman
          pip install pytest requests

      - name: Wait for services to be ready
        run: |
          sleep 60
          curl -f https://users-staging-278319877545.southamerica-east1.run.app/health || exit 1
          curl -f https://content-staging-278319877545.southamerica-east1.run.app/health || exit 1

      - name: Run API integration tests
        run: |
          cd tests/integration
          if [ -f test_api_integration.py ]; then
            pytest test_api_integration.py -v
          fi

      - name: Run Postman collections
        run: |
          if [ -f tests/postman/EvolveYou-API.postman_collection.json ]; then
            newman run tests/postman/EvolveYou-API.postman_collection.json \
              --environment tests/postman/staging.postman_environment.json \
              --reporters cli,json \
              --reporter-json-export newman-results.json
          fi

  # ===== E2E TESTS =====
  e2e-tests:
    name: üé≠ E2E Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Playwright
        run: |
          npm install -g @playwright/test
          npx playwright install

      - name: Run E2E tests
        run: |
          cd tests/e2e
          if [ -f playwright.config.js ]; then
            npx playwright test --reporter=html
          fi

      - name: Upload E2E results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results
          path: tests/e2e/playwright-report/

  # ===== PERFORMANCE TESTS =====
  performance-tests:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load tests
        run: |
          cd tests/performance
          if [ -f load-test.js ]; then
            k6 run --out json=results.json load-test.js
          fi

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: tests/performance/results.json

  # ===== NOTIFICATION =====
  notify:
    name: üì¢ Notify
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests, performance-tests]
    if: always()
    steps:
      - name: Notify success
        if: needs.integration-tests.result == 'success' && needs.e2e-tests.result == 'success' && needs.performance-tests.result == 'success'
        run: |
          echo "‚úÖ All tests passed! Deployment successful."

      - name: Notify failure
        if: needs.integration-tests.result == 'failure' || needs.e2e-tests.result == 'failure' || needs.performance-tests.result == 'failure'
        run: |
          echo "‚ùå Some tests failed! Check the logs."
          exit 1

